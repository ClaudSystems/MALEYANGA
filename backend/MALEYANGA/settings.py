# -*- coding: utf-8 -*-
"""
Django settings for MALEYANGA project.

Generated by 'django-admin startproject' using Django 5.2.6.
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent  # backend/

# Verificação de caminho (pode remover depois)
print(f"DEBUG: BASE_DIR = {BASE_DIR}")
print(f"DEBUG: Templates path = {BASE_DIR / 'templates'}")

# Quick-start development settings - unsuitable for production
SECRET_KEY = 'django-insecure-u)ajw51ed!%8c^$n$odr#j(=8-(5b_x03c!cn4xmn&cl&j=1ur'
DEBUG = True
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',  # Apenas uma vez
    'rest_framework_simplejwt',
    'clientes',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Deve vir primeiro
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'MALEYANGA.urls'

# Configuração dos TEMPLATES
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # backend/templates/
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MALEYANGA.wsgi.application'

# Usando a base de dados padrão SQLite
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / '..' / 'static',  # MALEYANGA/static/
]

# Verifique se a pasta static existe, se não, crie:
static_dir = BASE_DIR / '..' / 'static'
if not static_dir.exists():
    print(f"AVISO: Criando pasta static em {static_dir}")
    static_dir.mkdir(exist_ok=True)

STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuração Vite
VITE_DEV_MODE = DEBUG

if VITE_DEV_MODE:
    VITE_DEV_SERVER_URL = 'http://localhost:3000'
    template_js = f'{VITE_DEV_SERVER_URL}/src/main.jsx'
else:
    template_js = '/static/dist/assets/index-BfkMANgE.js'

# Configurações CORS e Cookies
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SECURE = False

# Configurações de autenticação adicionais
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Para desenvolvimento, desative algumas verificações de segurança
if DEBUG:
    # Permite acesso via IP
    ALLOWED_HOSTS = ['*']

    # Desativa algumas proteções para facilitar o desenvolvimento
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
else:
    # Configurações de produção
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_SAMESITE = 'Strict'
    CSRF_COOKIE_SAMESITE = 'Strict'

# Configurações de arquivos de mídia (se necessário)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Criar pasta media se não existir
media_dir = BASE_DIR / 'media'
if not media_dir.exists():
    media_dir.mkdir(exist_ok=True)

print("Configurações carregadas com sucesso!")
